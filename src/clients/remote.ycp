/****************************************************************************
 *
 * Copyright (c) 2012 Novell, Inc.
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of version 2 of the GNU General Public License as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail,
 * you may find current contact information at www.novell.com
 *
 ****************************************************************************/
/**
 * File:	clients/remote.ycp
 * Package:	Network configuration
 * Summary:	Remote Administration
 * Authors:	Arvin Schnell <arvin@suse.de>
 *		Michal Svec <msvec@suse.cz>
 *
 */

{

textdomain "network";

/* The main () */
y2milestone("----------------------------------------");
y2milestone("Remote module started");

import "Label";
import "Remote";
import "Wizard";
import "Report";

import "CommandLine";
import "RichText";

include "network/remote/dialogs.ycp";

/**
 * Main remote GUI
 */
any RemoteGUI() {
    Remote::Read();

    Wizard::CreateDialog();
    Wizard::SetDesktopTitleAndIcon("remote");
    Wizard::SetNextButton(`next, Label::FinishButton() );

    any ret = RemoteMainDialog();
    if(ret == `next) Remote::Write();

    UI::CloseDialog();
    return ret;
};

/**
 * Handler for action "list"
 * @param options action options
 */
define boolean ListHandler(map<string, string> options) {

    string summary = "";
    /* Command line output Headline */
    summary = "\n" + _("Remote Access Configuration Summary:") + "\n\n" +
	RichText::Rich2Plain(Remote::Summary()) + "\n";

    y2debug("%1", summary);
    CommandLine::Print(summary);
    return true;
}

/**
 * Handler for action "allow"
 * @param options action options
 */
define boolean SetRAHandler (map<string, string> options) {
    string allow_ra = tolower(options["set"]:"");

    if (allow_ra != "yes" && allow_ra != "no") {
	/* Command line error message */
	Report::Error(_("Please set 'yes' to allow the remote administration
or 'no' to disallow it."));
	return false;
    }

    y2milestone("Setting AllowRemoteAdministration to '%1'", allow_ra);
    Remote::Toggle(allow_ra == "yes");

    return true;
}

/**
 * Command line definition
 */
map cmdline = $[
    /* Commandline help title */
    "help"	: _("Remote Access Configuration"),
    "id"	: "remote",
    "guihandler": RemoteGUI,
    "initialize": Remote::Read,
    "finish"	: Remote::Write,
    "actions"	: $[
	"list" : $[
	    /* Commandline command help */
	    "help"	: _("Display configuration summary"),
	    "handler"	: ListHandler,
	],
	"allow" : $[
	    /* Commandline command help */
	    "help"	: _("Allow remote access"),
	    "handler"	: SetRAHandler,
	    "example"	: [
		"allow set=yes",
		"allow set=no",
	    ],
	],
    ],
    "options" : $[
	"set" : $[
	    /* Commandline command help */
	    "help" : _("Set 'yes' to allow or 'no' to disallow the remote administration"),
	    "type" : "string",
	]
    ],
    "mappings" : $[
	"allow" : [ "set" ],
    ],
];

any ret = CommandLine::Run(cmdline);
y2debug("ret=%1", ret);

/* Finish */
y2milestone("Remote module finished");
y2milestone("----------------------------------------");
return ret;

/* EOF */
}

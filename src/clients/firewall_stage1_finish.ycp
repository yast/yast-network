/****************************************************************************
 *
 * Copyright (c) 2012 Novell, Inc.
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of version 2 of the GNU General Public License as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail,
 * you may find current contact information at www.novell.com
 *
 ****************************************************************************/
/**
 * File:	clients/firewall_stage1_finish.ycp
 * Summary:	Installation client for writing firewall configuration 
 *		at the end of 1st stage
 * Author:	Bubli <kmachalkova@suse.cz>
 *
 */
{
textdomain "network";

import "Service";
import "SuSEFirewall";
import "SuSEFirewall4Network";
import "SuSEFirewallProposal";

any ret = nil;
string func = "";
map param = $[];

/* Check arguments */
if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
    func = (string)WFM::Args(0);
    if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	param = (map)WFM::Args(1);
}

y2milestone ("starting firewall_stage1_finish");
y2debug("func=%1", func);
y2debug("param=%1", param);

//we have those from the proposal
boolean fw_enabled = SuSEFirewall4Network::Enabled1stStage();
boolean ssh_enabled = SuSEFirewall4Network::EnabledSsh1stStage();
boolean vnc_enabled = SuSEFirewall4Network::EnabledVnc1stStage();

if (func == "Info")
{
    return (any)$[
	"steps" : 1,
	// progress step title
	"title" : _("Writing Firewall Configuration..."),
	"when" : (SuSEFirewallProposal::GetChangedByUser() || ssh_enabled || vnc_enabled) ? [ `installation,  `autoinst ] : [],
    ];
}
else if (func == "Write")
{
    y2milestone("After installation, firewall will be %1",
	fw_enabled ? sformat("enabled, ssh port will be %1", 
	ssh_enabled ? "open" : "closed") : "disabled");

    //now read the config from SuSEfirewall2 RPM
    SuSEFirewall::Read();

    //and merge
    SuSEFirewall::SetEnableService( fw_enabled );
    SuSEFirewall::SetStartService( fw_enabled );

    //only if we have openssh package - proposal takes care 
    //it gets installed if the user wants to open ssh port
    if (ssh_enabled)
    {
        SuSEFirewall::SetServicesForZones (["service:sshd"], SuSEFirewall::GetKnownFirewallZones(), true );
	//enable SSH service if the port is to be opened (bnc#537980)
	Service::Enable("sshd");
    }

    if (vnc_enabled)
    {
	foreach (string zone, SuSEFirewall::GetKnownFirewallZones(), {
	    // This VNC service doesn't have firewall services defined by package thus using ports
	    // Ports taken from yast2-installation:/startup/common/vnc.sh (function startVNCServer)
	    SuSEFirewall::SetAdditionalServices("TCP", zone, ["5801", "5901"]);
	});
    }

    //this is equivalent to write-only, do not attempt to restart the service
    SuSEFirewall::WriteConfiguration(); 
}
else
{
    y2error ("unknown function: %1", func);
    ret = nil;
}

y2debug("ret=%1", ret);
y2milestone("firewall_stage1_finish finished");
return ret;

}

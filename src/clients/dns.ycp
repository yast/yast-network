/****************************************************************************
 *
 * Copyright (c) 2012 Novell, Inc.
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of version 2 of the GNU General Public License as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail,
 * you may find current contact information at www.novell.com
 *
 ****************************************************************************/
/**
 * File:	clients/dns.ycp
 * Package:	Network configuration
 * Summary:	Hostname and DNS client
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 *
 * Main file for hostname and DNS configuration.
 * Uses all other files.
 */

{

textdomain "network";

/* The main () */
y2milestone("----------------------------------------");
y2milestone("DNS module started");

import "DNS";
import "Label";
import "Lan";
import "NetworkService";
import "Wizard";

import "CommandLine";
import "RichText";

/**
 * Return a modification status
 * @return true if data was modified
 */
define boolean Modified() {
    return DNS::modified;
}

include "network/runtime.ycp";
include "network/services/dns.ycp";

const string HOSTNAME       = "hostname";
const string NAMESERVER_1   = "nameserver1";
const string NAMESERVER_2   = "nameserver2";
const string NAMESERVER_3   = "nameserver3";

/**
 * Main DNS GUI
 */
any DNSGUI() {
    Wizard::CreateDialog();
    Wizard::SetDesktopTitleAndIcon("dns");
    DNS::Read();
    Lan::Read(`cache);

    Wizard::SetNextButton(`next, Label::FinishButton() );

    /* main ui function */
    any ret = DNSMainDialog(true);
    y2debug("ret == %1", ret);

    if(ret == `next && DNS::modified) {
	DNS::Write();
        // no more workarounds with dhcp-clients
        // do a full network restart (bnc#528937)
	NetworkService::StartStop();
    }

    UI::CloseDialog();
    return ret;
}

/**
 * Handler for action "list"
 * @param options action options
 */
define boolean ListHandler(map<string, string> options) {

    string summary = "";
    /* Command line output Headline */
    summary = "\n" + _("DNS Configuration Summary:") + "\n\n" +
	RichText::Rich2Plain(DNS::Summary()) + "\n";

    y2debug("%1", summary);
    CommandLine::Print(summary);
    return true;
}

/**
 * Handler for action "edit"
 * @param options action options
 * @return boolean if successful
 */
define boolean EditHandler(map<string, string> options)
{
    y2milestone( "Edit handler, options: %1", options);

    // validator: a reference to boolean( string) is expected 
    // setter: a reference to void( any) is expected
    // fail message: a string is expected
    map< string, map< string, any> > option_handlers = $[
        HOSTNAME: $[
            "validator":    Hostname::Check,
            "setter":       SetHostname,
            "fail_message": _( "InvalidHostname. ") + Hostname::ValidHost(),
        ], 
        NAMESERVER_1: $[
            "validator":    IP::Check,
            "setter":       SetNameserver1,
            "fail_message": _( "Invalid IP. ") + IP::Valid4() + "\n" + IP::Valid6(),
        ],
        NAMESERVER_2: $[
            "validator":    IP::Check,
            "setter":       SetNameserver2,
            "fail_message": _( "Invalid IP. ") + IP::Valid4() + "\n" + IP::Valid6(),
        ],
        NAMESERVER_3: $[
            "validator":    IP::Check,
            "setter":       SetNameserver3,
            "fail_message": _( "Invalid IP. ") + IP::Valid4() + "\n" + IP::Valid6(),
        ],
    ];

    const list< string> unmanaged_only_options = [
        NAMESERVER_1,
        NAMESERVER_2,
        NAMESERVER_3,
    ];

    boolean ret = true;

    foreach( string option, string value, options, 
    {
        if( contains( unmanaged_only_options, option) && NetworkService::IsManaged() )
        {
            CommandLine::Print( _("Cannot set ") + option + _(". Network is managed by NetworkManager."));
            
            ret = false;
        }

        boolean( string) option_validator = ( boolean( string)) option_handlers[ option, "validator"]:nil;
        void( any) option_setter = ( void( any)) option_handlers[ option, "setter"]:nil;
        string fail_message = ( string) option_handlers[ option, "fail_message"]:_( "Invalid option value.");

        if( ( option_validator == nil) || ( option_setter == nil))
        {
            y2internal( "Edit handler: unknown option (%1=%2) or unknown option handlers", option, value);

            CommandLine::Print( _("Internal error") );

            ret = false;
        }

        if( option_validator( value))
        {
            option_setter( value);
        }
        else
        {
            CommandLine::Print( fail_message);
            ret = false;
        }
    });

    return ret;
}

/**
 * CLI mode initialization handler
 * @return boolean if successful
 */
define boolean InitHandler()
{
    if( !DNS::Read() || !Lan::Read( `cache))
        return false;

    InitHnSettings();

    return true;
}

/**
 *  CLI mode finish handler
 * @return boolean if successful
 */
define boolean FinishHandler()
{
    StoreHnSettings();

    return DNS::Write();
}

/**
 * Command line definition
 */
map cmdline = $[
    /* Commandline help title */
    "help"	: _("DNS Configuration"),
    "id"	: "dns",
    "guihandler": DNSGUI,
    "initialize": InitHandler,
    "finish"	: FinishHandler,
    "actions"	: $[
	"list" : $[
	    /* Commandline command help */
	    "help"	: _("Display configuration summary"),
	    "handler"	: ListHandler,
	],
        "edit" : $[
            "help"      : _("Edit current settings"),
            "handler"   : EditHandler,
        ],
    ],
    "options"   : $[
        HOSTNAME      : $[
            "help"      : _( "Used machine hostname"),
            "type"      : "string",
            "example"   : "dns edit hostname=SUSE-host",
        ],
        NAMESERVER_1   : $[
            "help"      : _( "IP address of first nameserver."),
            "type"      : "string",
            "example"   : "dns edit nameserver1=192.168.0.1",
        ],
        NAMESERVER_2   : $[
            "help"      : _( "IP address of second nameserver."),
            "type"      : "string",
            "example"   : "dns edit nameserver2=192.168.0.1",
        ],
        NAMESERVER_3   : $[
            "help"      : _( "IP address of third nameserver."),
            "type"      : "string",
            "example"   : "dns edit nameserver3=192.168.0.1",
        ],
    ],
    "mappings"  : $[
        "edit"  : [ 
            HOSTNAME,
            NAMESERVER_1,
            NAMESERVER_2,
            NAMESERVER_3,
         ],
    ],
];

any ret = CommandLine::Run(cmdline);
y2debug("ret=%1", ret);

/* Finish */
y2milestone("DNS module finished");
y2milestone("----------------------------------------");
return ret;

/* EOF */
}

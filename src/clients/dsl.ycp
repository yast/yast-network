/****************************************************************************
 *
 * Copyright (c) 2012 Novell, Inc.
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of version 2 of the GNU General Public License as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail,
 * you may find current contact information at www.novell.com
 *
 ****************************************************************************/
/**
 * File:	clients/dsl.ycp
 * Package:	Network configuration
 * Summary:	DSL main file
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 *
 * Main file for DSL configuration.
 * Uses all other files.
 */

{

textdomain "network";

/* The main () */
y2milestone("----------------------------------------");
y2milestone("DSL module started");

import "DSL";
import "GetInstArgs";
import "Mode";
import "CommandLine";

include "network/dsl/wizards.ycp";


/* is this proposal or not? */
boolean propose = false;
list args = WFM::Args();
if(size(args) > 0) {
    if(is(WFM::Args(0), path) && WFM::Args(0) == .propose) {
	y2milestone("Using PROPOSE mode");
	propose = true;
    }
   // Bugzilla #269890, CommanLine "support"
   // argmap is only a map, CommandLine uses string parameters
   if (size (GetInstArgs::argmap()) == 0 && size (WFM::Args()) > 0 && !propose) {
       Mode::SetUI ("commandline");
       y2milestone ("Mode CommandLine not supported, exiting...");
       // TRANSLATORS: error message - the module does not provide command line interface
       CommandLine::Print(_("There is no user interface available for this module."));
       return nil;
   }

if(is(WFM::Args(0), path) && WFM::Args(0) == .capiadsl) {
        y2milestone("Using CAPI-ADSL mode");
	DSL::capiadsl = nil;
	if(size(args) > 1) DSL::capiadsl = (map) WFM::Args(1);
	if(DSL::capiadsl == nil) DSL::capiadsl = $[];
    }
    else
        y2error("Bad argument for modem: %1", WFM::Args(0));
}

/* main ui function */
any ret = nil;

if(propose) ret = DSLAutoSequence();
else ret = DSLSequence();
y2debug("ret == %1", ret);

/* Finish */
y2milestone("DSL module finished");
y2milestone("----------------------------------------");
return ret;

/* EOF */
}

/****************************************************************************
 *
 * Copyright (c) 2008 - 2012 Novell, Inc.
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of version 2 of the GNU General Public License as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail,
 * you may find current contact information at www.novell.com
 *
 ****************************************************************************/

/**
 * File:	firewall_stage1_proposal.ycp
 * Summary:	Configuration of fw in 1st stage
 * Author:	Bubli <kmachalkova@suse.cz>
 *
 */

{
    textdomain "network";

    import "Label";
    import "Linuxrc";
    import "PackagesProposal";
    import "ProductControl";
    import "ProductFeatures";
    import "SuSEFirewall4Network";
    import "SuSEFirewallProposal";
    import "Wizard";

    const string PROPOSAL_ID = "fw_1ststage";

    const string LINK_ENABLE_FIREWALL  = "firewall--enable_firewall_in_proposal";
    const string LINK_DISABLE_FIREWALL = "firewall--disable_firewall_in_proposal";
    const string LINK_ENABLE_SSH       = "firewall--enable_ssh_in_proposal";
    const string LINK_DISABLE_SSH      = "firewall--disable_ssh_in_proposal";
    const string LINK_ENABLE_VNC       = "firewall--enable_vnc_in_proposal";
    const string LINK_DISABLE_VNC      = "firewall--disable_vnc_in_proposal";
    const string LINK_FIREWALL_DIALOG  = "firewall_stage1";

    symbol FirewallDialogSimple() {
	string title =  _("Basic Firewall and SSH Configuration");

	term vnc_support = `Left(`CheckBox(`id("open_vnc_port"),
	    // TRANSLATORS: check-box label
	    _("Open &VNC Ports"), SuSEFirewall4Network::EnabledVnc1stStage()));

	term contents = `VBox (
            `Frame (
            // frame label
            _("Firewall and SSH service"),
            `HSquash (
                `MarginBox (
                        0.5, 0.5,
			`VBox(
			    `Left(`CheckBox(`id("enable_fw"),`opt(`notify), 
				    // TRANSLATORS: check-box label
				    _("Enable Firewall"), SuSEFirewall4Network::Enabled1stStage())),
			    `Left(`CheckBox(`id("open_ssh_port"), 
				    // TRANSLATORS: check-box label
				    _("Open SSH Port and Enable SSH Service"), SuSEFirewall4Network::EnabledSsh1stStage())),
			    (Linuxrc::vnc() ? vnc_support : `Empty())
			)
                    )
                )
            )
	);

	string help = _("<p><b><big>Firewall and SSH</big></b><br>
Firewall is a defensive mechanism that protects your computer from network attacks.
SSH is a service that allows logging into this computer remotely via dedicated
SSH client</p>") +

_("<p>Here you can choose whether the firewall will be enabled or disabled after
the installation. It is recommended to keep it enabled.</p>") +

_("<p>With enabled firewall, you can decide whether to open firewall port for SSH
service and allow remote SSH logins. This will also enable SSH service (i.e. it
will be started on computer boot).</p>") +

(Linuxrc::vnc() ?
    // TRANSLATORS: help text
    _("<p>You can also open VNC ports in firewall. It will not enable
the remote administration service on a running system but it is
started by the installer automatically if needed.</p>")
    :
    ""
);

	Wizard::CreateDialog ();
	Wizard::SetTitleIcon ("yast-firewall");

	Wizard::SetContentsButtons (title, contents, help, Label::BackButton(), Label::OKButton());
	Wizard::SetAbortButton (`cancel, Label::CancelButton());
	Wizard::HideBackButton();

	UI::ChangeWidget(`id("open_ssh_port"),`Enabled, SuSEFirewall4Network::Enabled1stStage());
	UI::ChangeWidget(`id("open_vnc_port"),`Enabled, SuSEFirewall4Network::Enabled1stStage());

	any dialog_ret = nil;

	while (true) {
	    dialog_ret =  UI::UserInput();
	    boolean enable_firewall = (boolean) UI::QueryWidget(`id("enable_fw"),`Value);

	    if (dialog_ret == "enable_fw") {
		UI::ChangeWidget(`id("open_ssh_port"),`Enabled, enable_firewall);
		UI::ChangeWidget(`id("open_vnc_port"),`Enabled, enable_firewall);
		continue;
	    } else if (dialog_ret == `next || dialog_ret == `ok) {
	        boolean open_ssh_port = (boolean) UI::QueryWidget(`id("open_ssh_port"),`Value);
	        boolean open_vnc_port = (boolean) UI::QueryWidget(`id("open_vnc_port"),`Value);

		SuSEFirewall4Network::SetEnabled1stStage(enable_firewall);

		if (enable_firewall) {
		    SuSEFirewall4Network::SetSshEnabled1stStage(open_ssh_port);
		    SuSEFirewall4Network::SetVncEnabled1stStage(open_vnc_port);
		}
	    }

	    // anything but enabling the firewall closes this dialog
	    // (VNC and SSH checkboxes do nothing)
	    break;
	}

	Wizard::CloseDialog();
        return (symbol) dialog_ret;

    }

    // run this only once
    if (!SuSEFirewallProposal::GetProposalInitialized()) {

        // variables from control file
        y2milestone("Default firewall values: enable_firewall=%1, enable_ssh=%2",
            ProductFeatures::GetBooleanFeature ("globals", "enable_firewall"), 
	    ProductFeatures::GetBooleanFeature ("globals", "firewall_enable_ssh"));

        SuSEFirewall4Network::SetEnabled1stStage(ProductFeatures::GetBooleanFeature ("globals", "enable_firewall"));

	//we're installing over SSH, propose opening SSH port (bnc#535206)
	if(Linuxrc::usessh()) {
	    SuSEFirewall4Network::SetSshEnabled1stStage (true);
	} else {
	    SuSEFirewall4Network::SetSshEnabled1stStage (ProductFeatures::GetBooleanFeature ("globals", "firewall_enable_ssh"));
	}

	//we're installing over VNC, propose opening VNC port (bnc#734264)
	if (Linuxrc::vnc()) {
	    SuSEFirewall4Network::SetVncEnabled1stStage (true);
	}

        SuSEFirewallProposal::SetProposalInitialized(true);
    }


    string func  = (string)WFM::Args(0);
    map    param = (map)WFM::Args(1);
    map<string,any>    ret   = $[];


    if ( func == "MakeProposal" )
    {
        // Summary is visible only if installing over VNC
        // and if firewall is enabled - otherwise port could not be blocked
        string vnc_proposal = ((Linuxrc::vnc() && SuSEFirewall4Network::Enabled1stStage()) ?
            "<li>" + (SuSEFirewall4Network::EnabledVnc1stStage() ?
                sformat(_("VNC ports will be open (<a href=\"%1\">close</a>)"), LINK_DISABLE_VNC)
                :
                sformat(_("VNC ports will be blocked (<a href=\"%1\">open</a>)"), LINK_ENABLE_VNC)
            ) + "</li>\n"
            :
            ""
        );

        string output = "<ul>\n" +

        "<li>" + (SuSEFirewall4Network::Enabled1stStage() ?
            sformat(_("Firewall will be enabled (<a href=\"%1\">disable</a>)"), LINK_DISABLE_FIREWALL)
            :
            sformat(_("Firewall will be disabled (<a href=\"%1\">enable</a>)"), LINK_ENABLE_FIREWALL)
        ) + "</li>\n" +

        // Summary is visible even if firewall is disabled - it also installs and enables the SSHD service
        "<li>" + (SuSEFirewall4Network::EnabledSsh1stStage() ?
            sformat(_("SSH service will be enabled, SSH port will be open (<a href=\"%1\">disable and close</a>)"), LINK_DISABLE_SSH)
            :
            sformat(_("SSH service will be disabled, SSH port will be blocked (<a href=\"%1\">enable and open</a>)"), LINK_ENABLE_SSH)
        ) + "</li>\n" +

        vnc_proposal +

        "</ul>\n";

	ret = $[
	    "preformatted_proposal" : output,
	    "warning_level" : `warning,
	    "links" : [
		LINK_ENABLE_FIREWALL, LINK_DISABLE_FIREWALL,
		LINK_ENABLE_SSH, LINK_DISABLE_SSH,
		LINK_ENABLE_VNC, LINK_DISABLE_VNC,
	    ]
	];
    }
    else if ( func == "AskUser" ) {
	any chosen_link = param["chosen_id"]:nil;
	symbol result = `next;
	y2milestone("User clicked %1", chosen_link);

	if (chosen_link == LINK_ENABLE_FIREWALL)
	{
	    y2milestone("Enabling FW");
	    SuSEFirewall4Network::SetEnabled1stStage(true);
	    PackagesProposal::AddResolvables(PROPOSAL_ID, `package, ["SuSEfirewall2"]);
	}
	else if (chosen_link == LINK_DISABLE_FIREWALL)
	{
	    y2milestone("Disabling FW");
	    SuSEFirewall4Network::SetEnabled1stStage( false );
	    PackagesProposal::RemoveResolvables(PROPOSAL_ID, `package, ["SuSEfirewall2"]);
	}
	else if (chosen_link == LINK_ENABLE_SSH)
	{
	    y2milestone("Enabling SSH");
	    PackagesProposal::AddResolvables(PROPOSAL_ID, `package, ["openssh"]);
	    SuSEFirewall4Network::SetSshEnabled1stStage( true );
	}
	else if (chosen_link == LINK_DISABLE_SSH)
	{
	    y2milestone("Disabling SSH");
	    SuSEFirewall4Network::SetSshEnabled1stStage( false );
	    PackagesProposal::RemoveResolvables(PROPOSAL_ID, `package, ["openssh"]);
	}
	else if (chosen_link == LINK_ENABLE_VNC)
	{
	    y2milestone("Enabling VNC");
	    SuSEFirewall4Network::SetVncEnabled1stStage( true );
	}
	else if (chosen_link == LINK_DISABLE_VNC)
	{
	    y2milestone("Disabling VNC");
	    SuSEFirewall4Network::SetVncEnabled1stStage( false );
	}
	else if (chosen_link == LINK_FIREWALL_DIALOG)
	{
	    result = FirewallDialogSimple();
	}

	SuSEFirewallProposal::SetChangedByUser(true);

	//Disable one of the AC steps (see control.$product.xml for appropriate unique IDs)
	if ( ProductControl::GetUseAutomaticConfiguration() )
	    ProductControl::DisableACItem("ac_2", "firewall");
	//or subproposal (if 2nd stage is non-automatic)
	else
	    ProductControl::DisableSubProposal("network_continue", "firewall");

	ret = $[ "workflow_sequence" : result ];
    }
    else if ( func == "Description" )
    {
        ret =
            $[
                // Proposal title 
              "rich_text_title" :       _("Firewall and SSH"),
                // Menu entry label
              "menu_title"      :       _("&Firewall and SSH"),
              "id"              :       LINK_FIREWALL_DIALOG
            ];
    }
    else if (func == "Write")
    {
	ret =
	    $[
		"success"	:	true
	    ];
    }

    return ret;
}

/****************************************************************************
 *
 * Copyright (c) 2012 Novell, Inc.
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of version 2 of the GNU General Public License as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail,
 * you may find current contact information at www.novell.com
 *
 ****************************************************************************/
/**
 * File:	modules/NetworkStorage.ycp
 * Package:	Network configuration
 * Summary:	Networked disks
 * Authors:	Martin Vidner <mvidner@suse.cz>
 *
 *
 * #176804 - Root on iSCSI installation fails
 */

{

module "NetworkStorage";

import "Storage";

/**
 * Ask /proc/mounts what device a mount point is using.
 * @return e.g. /dev/sda2 (or just "nfs")
 */
global string getDevice(string mount_point) {
    string cmd = sformat("grep ' %1 ' /proc/mounts|grep -v rootfs|tr -d '\n'", mount_point);
    map out = (map)SCR::Execute(.target.bash_output, cmd);
    y2milestone("mountpoint found %1", out);
    list<string> fields =  splitstring(out["stdout"]:"", " ");
    string vfstype = fields[2]:"";
    string device = (vfstype == "nfs" || vfstype == "nfs4")? "nfs": fields[0]:"";
    y2milestone("%1 is on device: %2", mount_point, device);
    return device;
}

/**
 * If the disk is on a networked device (NFS, ISCSI),
 * the main NIC needs STARTMODE nfsroot instead of auto.
 * @return root dev over network: `no `iscsi `nfs `fcoe
 */
global symbol isDiskOnNetwork(string device) {
    return Storage::IsDeviceOnNetwork(device);
}

global list<string> getiBFTDevices() {
    if (SCR::Execute(.target.bash, "ls /sys/firmware/ibft")==0){
        map<string, any> output = (map<string, any>)SCR::Execute(.target.bash_output, "ls /sys/firmware/ibft/ethernet*/device/net/");
        list<string> ifaces = filter(string row, splitstring(output["stdout"]:"", "\n"), { return (size(row)>0);});
        return ifaces;
    }
    else {
        return [];
    }
}

/* EOF */
}

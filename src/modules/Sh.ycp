{
  module "Sh";

  /**
   * Returns output of shell command,
   * with newlines squashed mimilarly to shell `` backtick interpolation.
   * Stderr is logged.
   * Failure (non zero exit code) is logged.
   * @example
   * Sh::Out("echo first line; echo second line") -> "first line second line"
   */
  global string Out(string command) {
    // stub implementation, FIXME!
    return "first line second line";
  }

  /**
   * Returns output of shell command, as a list of whitespace-delimited words
   * Stderr is logged.
   * Failure (non zero exit code) is logged.
   * @example
   * Sh::Words("echo ' wlan0'; echo ' eth0') -> ["wlan0", "eth0"]
   */
  global list<string> Words(string command) {
    return ["FIXME"];
  }

  /**
   * Returns output of shell command, as a list of chomped lines
   * Stderr is logged.
   * Failure (non zero exit code) is logged.
   * @example
   * Sh::Lines("echo '1 eth0'; echo; echo '3 eth2') -> ["1 eth0", "", "3 eth2"]
   */
  global list<string> Lines(string command) {
    return ["FIXME"];
  }

  /**
   * Returns output of shell command (including any trailing newline)
   * Stderr is logged.
   * Failure (non zero exit code) is logged.
   * @example
   * Sh::RawOut("echo first line; echo second line") -> "first line\nsecond line\n"
   */
  global string RawOut(string command) {
    // stub implementation, FIXME!
    return "first line\nsecond line\n";
  }

  integer Log_impl(string message, string command) {
    map<string, any> ret = (map<string,any>) SCR::Execute(.target.bash_output, command);
    // stub implementation, FIXME!
    return 0;
  }

  /**
   * Run a command and log a message, the command, stdout, stderr, exit code
   * @return exit code
   * @example
   * Sh::LogMsg("Testing", "echo ERR >&2; echo OUT") -> 0
   * <1> Testing: Command: "echo ERR >&2; echo OUT" Exit: 0
   * <1> OUT
   * <3> ERR
   */
  global integer LogMsg(string message, string command) {
    return Log_impl(message, command);
  }

  /**
   * Run a command and log the command, stdout, stderr, exit code
   * @return exit code
   * @example
   * Sh::Log("echo ERR >&2; echo OUT") -> 0
   * <1> Command: "echo ERR >&2; echo OUT" Exit: 0
   * <1> OUT
   * <3> ERR
   */
  global integer Log(string command) {
    return Log_impl(/*message = */ nil, command);
  }

  
  /*
   * Simple commands, to replace .target.bash
   */

  // implementation
  integer Bash(string command) {
    // y2milestone(2, ...) reports code locations from 2 call frames up,
    // that is from the caller's perspective
    y2milestone(2, "Run: %1", command);
    integer exit = (integer) SCR::Execute(.target.bash, command);
    y2milestone(2, "Exit: %1", exit);
    return exit;
  }

  /**
   * command, exit, stderr is logged
   * output is discarded (target.bash compatibility; use >&2 to get it)
   */
  global void Run(string command) {
    Bash(command);
  }
  /**
   * command, exit, stderr is logged
   * output is discarded (target.bash compatibility; use >&2 to get it)
   * @return exit code was zero
   */
  global boolean OK(string command) {
    return Bash(command) == 0;
  }
  /**
   * command, exit, stderr is logged
   * output is discarded (target.bash compatibility; use >&2 to get it)
   * @return exit code was nonzero
   */
  global boolean Fail(string command) {
    return Bash(command) != 0;
  }
}

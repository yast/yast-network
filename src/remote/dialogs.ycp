/****************************************************************************
 *
 * Copyright (c) 2012 Novell, Inc.
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of version 2 of the GNU General Public License as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail,
 * you may find current contact information at www.novell.com
 *
 ****************************************************************************/
/**
 * File:	remote/dialogs.ycp
 * Module:	Network configuration
 * Summary:	Dialog for Remote Administration
 * Authors:	Arvin Schnell <arvin@suse.de>
 *
 */

{

textdomain "network";

import "Label";
import "Remote";
import "Wizard";
import "CWMFirewallInterfaces";
import "Popup";

boolean DialogDone( any event)
{
    symbol action = (symbol) event;

    if( action == `next || action == `back)
        return true;
    if( action == `abort || action == `cancel)
        return true;

    return false;
}

boolean UsePassword()
{
    boolean allowed = (boolean) UI::QueryWidget(`id(`allow), `Value);
    boolean use_password = (boolean) UI::QueryWidget( `id( `passwd_used), `Value);

    return allowed && use_password;
}

/**
 * Enables/Disables widgets used for password input.
 */
void TogglePasswdInputs( boolean enabled)
{
    list <symbol> widgets = [
        `passwd_new,
    ];

    foreach( symbol widget, widgets, 
    {
        UI::ChangeWidget( `id( widget), `Enabled, enabled);
    });
}

/**
 * Enables/Disables all widgets somehow related to password setup.
 */
void TogglePasswdWidgets( boolean enabled)
{
    UI::ChangeWidget( `id( `passwd_used), `Enabled, enabled);
    TogglePasswdInputs( enabled);
}

/**
 * Handles remote access (de)activation.
 */
void ToggleAllowed( boolean enabled)
{
    Remote::Toggle( enabled);
    TogglePasswdWidgets( enabled);
}

/**
 * Remote administration dialog
 * @return dialog result
 */
symbol RemoteMainDialog() {

    /* Ramote Administration dialog caption */
    string caption = _("Remote Administration");

    term allow_buttons = `RadioButtonGroup(
	`VBox (
	    /* RadioButton label */
	    `Left(`RadioButton(`id(`allow), `opt( `notify), _("&Allow Remote Administration"), Remote::IsEnabled() )),
	    /* RadioButton label */
	    `Left(`RadioButton(`id(`disallow), `opt( `notify), _("&Do Not Allow Remote Administration"), Remote::IsDisabled() ))
	)
    );

    term password_settings = `VBox(
        `Left( `CheckBox( `id( `passwd_used), `opt( `notify), _( "Use password"), true) ),
        `Password( `id( `passwd_new), `opt(`hstretch), Label::Password(), "")
    );

    map<string,any> firewall_widget = CWMFirewallInterfaces::CreateOpenFirewallWidget ($[
	//Service vnc renamed to service:xorg-x11-server (#431971)
	"services" : [ "service:xorg-x11-server" ],
	"display_details" : true,
    ]);
    term firewall_layout = firewall_widget["custom_widget"]:`VBox ();
    string firewall_help = firewall_widget["help"]:"";

    /* Remote Administration dialog help
       %1 and %2 are port numbers for vnc and vnchttp, eg. 5901, 5801 */
    string help = sformat (
_("<p><b><big>Remote Administration Settings</big></b></p>
<p>If this feature is enabled, you can
administer this machine remotely from another machine. Use a VNC
client, such as krdc (connect to <tt>&lt;hostname&gt;:%1</tt>), or
a Java-capable Web browser (connect to <tt>http://&lt;hostname&gt;:%2/</tt>).
This form of remote administration is less secure than using SSH.</p>
"), 5901, 5801) + firewall_help;

    /* Remote Administration dialog contents */
    term contents = `HBox(
	`HStretch(),
	`VBox (
	    `Frame (
		/* Dialog frame title */
		_("Remote Administration Settings"),
                `VBox(
                    allow_buttons, 
                    `VSpacing( 1),
                    password_settings
                )
	    ),
            `VSpacing( 1), 
	    firewall_layout
	),
	`HStretch()
    );

    Wizard::SetContentsButtons(caption, contents, help,
	    Label::BackButton(), Label::FinishButton());
    Wizard::SetNextButton(`next, Label::OKButton());
    Wizard::SetAbortButton(`abort, Label::CancelButton());
    Wizard::HideBackButton();

    TogglePasswdWidgets( Remote::IsEnabled());

    CWMFirewallInterfaces::OpenFirewallInit (firewall_widget, "");

    any ret = nil;
    map event = nil;

    repeat {
	event = UI::WaitForEvent ();
	ret = event["ID"]:nil;

	CWMFirewallInterfaces::OpenFirewallHandle (firewall_widget, "", event);

        if( ret == `passwd_used)
        {
            TogglePasswdInputs( (boolean) UI::QueryWidget( `id( `passwd_used), `Value));
        }
        else if( ret == `allow || ret == `disallow)
        {
            boolean allowed = (boolean) UI::QueryWidget(`id(`allow), `Value);

            ToggleAllowed( allowed);
        }
	else if(ret == `help)
	{
	    Wizard::ShowHelp(help);
	}
        else if(ret == `next)
        {
    	    CWMFirewallInterfaces::OpenFirewallStore (firewall_widget, "", event);

            string new_password = (string) UI::QueryWidget( `id( `passwd_new), `Value);

            if( UsePassword() && !Remote::SetPassword( new_password) )
            {
                Popup::Error( Remote::ValidPassword() );
                y2error( "Remote Administration: Invalid password");

                UI::ChangeWidget( `id( `passwd_new), `Value, "");

                ret = nil;
            }
        }

    } until( DialogDone( ret) );


    return (symbol) ret;
}

/* EOF */
}

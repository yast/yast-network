/****************************************************************************
 *
 * Copyright (c) 2012 Novell, Inc.
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of version 2 of the GNU General Public License as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail,
 * you may find current contact information at www.novell.com
 *
 ****************************************************************************/
{
    import "Assert";
    import "Testsuite";

    map READ = $[
	"probe" : $[
	    "architecture" : "i386",
        ],
    ];

    map EXEC = $[
        "target": $[
            "bash_output": $[
                "stdout": "",
                "stderr": "",
                "exit": 0
            ],
        ],
    ];

    Testsuite::Init( [ READ, $[], EXEC ], nil);

    import "LanItems";

    include "network/routines.ycp";

    // valid
    Assert::Equal( true, ValidNicName( "eth0") );
    Assert::Equal( true, ValidNicName( "eth_0") );
    Assert::Equal( true, ValidNicName( "eth-0") );
    Assert::Equal( true, ValidNicName( "eth.0") );
    Assert::Equal( true, ValidNicName( "eth:0") );
    // invalid: too long
    Assert::Equal( false, ValidNicName( "0123456789012345") );
    // invalid: wrong char
    Assert::Equal( false, ValidNicName( "eth0?") );

    // create Items hash, it's easier to create by hand than use LanItems::Read
    // due to embedded ReadHardware and co (too many faked inputs which are not
    // in fact needed).
    LanItems::Items[ 0] = $[ 
        "ifcfg" : "eth1",
        "udev" : $[
            "net" : [ 
                "KERNELS=\"invalid\"", 
                "NAME=\"eth1\"" 
            ],
            "driver" : nil,
        ]
    ];

    LanItems::FindAndSelect( "eth1");

    list<string> new_rules = LanItems::SetItemUdev( "NAME", "nic_name");
    Assert::Equal( true, contains( new_rules, "NAME=\"nic_name\""));

    new_rules = LanItems::SetItemUdev( "KERNELS", "0000:00:19.x");
    Assert::Equal( true, contains( new_rules, "KERNELS==\"0000:00:19.x\""));

    new_rules = LanItems::ReplaceItemUdev( "KERNELS", "ATTR{address}", "xx:01:02:03:04:05");
    Assert::Equal( true, contains( new_rules, "ATTR{address}==\"xx:01:02:03:04:05\""));
}
